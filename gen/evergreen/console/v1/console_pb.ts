// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=.ts"
// @generated from file evergreen/console/v1/console.proto (package evergreen.console.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message evergreen.console.v1.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceApp
 */
export class DeviceApp extends Message<DeviceApp> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<DeviceApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceApp {
    return new DeviceApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceApp {
    return new DeviceApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceApp {
    return new DeviceApp().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceApp | PlainMessage<DeviceApp> | undefined, b: DeviceApp | PlainMessage<DeviceApp> | undefined): boolean {
    return proto3.util.equals(DeviceApp, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceHealthSnapshot
 */
export class DeviceHealthSnapshot extends Message<DeviceHealthSnapshot> {
  /**
   * @generated from field: string disk = 1;
   */
  disk = "";

  /**
   * @generated from field: string battery = 2;
   */
  battery = "";

  constructor(data?: PartialMessage<DeviceHealthSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceHealthSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "battery", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceHealthSnapshot {
    return new DeviceHealthSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceHealthSnapshot {
    return new DeviceHealthSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceHealthSnapshot {
    return new DeviceHealthSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceHealthSnapshot | PlainMessage<DeviceHealthSnapshot> | undefined, b: DeviceHealthSnapshot | PlainMessage<DeviceHealthSnapshot> | undefined): boolean {
    return proto3.util.equals(DeviceHealthSnapshot, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceUpdateStatus
 */
export class DeviceUpdateStatus extends Message<DeviceUpdateStatus> {
  /**
   * @generated from field: string channel = 1;
   */
  channel = "";

  /**
   * @generated from field: string last_sync = 2;
   */
  lastSync = "";

  /**
   * @generated from field: string pending_version = 3;
   */
  pendingVersion = "";

  constructor(data?: PartialMessage<DeviceUpdateStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceUpdateStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_sync", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pending_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceUpdateStatus {
    return new DeviceUpdateStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceUpdateStatus {
    return new DeviceUpdateStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceUpdateStatus {
    return new DeviceUpdateStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceUpdateStatus | PlainMessage<DeviceUpdateStatus> | undefined, b: DeviceUpdateStatus | PlainMessage<DeviceUpdateStatus> | undefined): boolean {
    return proto3.util.equals(DeviceUpdateStatus, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceEvent
 */
export class DeviceEvent extends Message<DeviceEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string occurred_at = 2;
   */
  occurredAt = "";

  /**
   * @generated from field: string actor = 3;
   */
  actor = "";

  /**
   * @generated from field: string action = 4;
   */
  action = "";

  /**
   * @generated from field: string severity = 5;
   */
  severity = "";

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  constructor(data?: PartialMessage<DeviceEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "occurred_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "severity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceEvent {
    return new DeviceEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceEvent {
    return new DeviceEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceEvent {
    return new DeviceEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceEvent | PlainMessage<DeviceEvent> | undefined, b: DeviceEvent | PlainMessage<DeviceEvent> | undefined): boolean {
    return proto3.util.equals(DeviceEvent, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceSummary
 */
export class DeviceSummary extends Message<DeviceSummary> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string hostname = 2;
   */
  hostname = "";

  /**
   * @generated from field: string model = 3;
   */
  model = "";

  /**
   * @generated from field: string os_version = 4;
   */
  osVersion = "";

  /**
   * @generated from field: string policy_version = 5;
   */
  policyVersion = "";

  /**
   * @generated from field: string health = 6;
   */
  health = "";

  /**
   * @generated from field: string org_id = 7;
   */
  orgId = "";

  /**
   * @generated from field: string last_seen = 8;
   */
  lastSeen = "";

  /**
   * @generated from field: string status = 9;
   */
  status = "";

  constructor(data?: PartialMessage<DeviceSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "policy_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "health", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "last_seen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceSummary {
    return new DeviceSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceSummary {
    return new DeviceSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceSummary {
    return new DeviceSummary().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceSummary | PlainMessage<DeviceSummary> | undefined, b: DeviceSummary | PlainMessage<DeviceSummary> | undefined): boolean {
    return proto3.util.equals(DeviceSummary, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceDetail
 */
export class DeviceDetail extends Message<DeviceDetail> {
  /**
   * @generated from field: evergreen.console.v1.DeviceSummary summary = 1;
   */
  summary?: DeviceSummary;

  /**
   * @generated from field: string serial_number = 2;
   */
  serialNumber = "";

  /**
   * @generated from field: repeated evergreen.console.v1.DeviceApp installed_apps = 3;
   */
  installedApps: DeviceApp[] = [];

  /**
   * @generated from field: evergreen.console.v1.DeviceHealthSnapshot health_snapshot = 4;
   */
  healthSnapshot?: DeviceHealthSnapshot;

  /**
   * @generated from field: evergreen.console.v1.DeviceUpdateStatus updates = 5;
   */
  updates?: DeviceUpdateStatus;

  /**
   * @generated from field: repeated evergreen.console.v1.DeviceEvent events = 6;
   */
  events: DeviceEvent[] = [];

  constructor(data?: PartialMessage<DeviceDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "message", T: DeviceSummary },
    { no: 2, name: "serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "installed_apps", kind: "message", T: DeviceApp, repeated: true },
    { no: 4, name: "health_snapshot", kind: "message", T: DeviceHealthSnapshot },
    { no: 5, name: "updates", kind: "message", T: DeviceUpdateStatus },
    { no: 6, name: "events", kind: "message", T: DeviceEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDetail {
    return new DeviceDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDetail {
    return new DeviceDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDetail {
    return new DeviceDetail().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDetail | PlainMessage<DeviceDetail> | undefined, b: DeviceDetail | PlainMessage<DeviceDetail> | undefined): boolean {
    return proto3.util.equals(DeviceDetail, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListDevicesRequest
 */
export class ListDevicesRequest extends Message<ListDevicesRequest> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: string search = 3;
   */
  search = "";

  /**
   * @generated from field: string last_seen_after = 4;
   */
  lastSeenAfter = "";

  /**
   * @generated from field: string last_seen_before = 5;
   */
  lastSeenBefore = "";

  /**
   * @generated from field: int32 page = 6;
   */
  page = 0;

  /**
   * @generated from field: int32 page_size = 7;
   */
  pageSize = 0;

  /**
   * @generated from field: string sort_by = 8;
   */
  sortBy = "";

  /**
   * @generated from field: bool descending = 9;
   */
  descending = false;

  constructor(data?: PartialMessage<ListDevicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListDevicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_seen_after", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_seen_before", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "sort_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDevicesRequest {
    return new ListDevicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDevicesRequest {
    return new ListDevicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDevicesRequest {
    return new ListDevicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDevicesRequest | PlainMessage<ListDevicesRequest> | undefined, b: ListDevicesRequest | PlainMessage<ListDevicesRequest> | undefined): boolean {
    return proto3.util.equals(ListDevicesRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListDevicesResponse
 */
export class ListDevicesResponse extends Message<ListDevicesResponse> {
  /**
   * @generated from field: repeated evergreen.console.v1.DeviceSummary devices = 1;
   */
  devices: DeviceSummary[] = [];

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  constructor(data?: PartialMessage<ListDevicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListDevicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "devices", kind: "message", T: DeviceSummary, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDevicesResponse {
    return new ListDevicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDevicesResponse {
    return new ListDevicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDevicesResponse {
    return new ListDevicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDevicesResponse | PlainMessage<ListDevicesResponse> | undefined, b: ListDevicesResponse | PlainMessage<ListDevicesResponse> | undefined): boolean {
    return proto3.util.equals(ListDevicesResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.GetDeviceRequest
 */
export class GetDeviceRequest extends Message<GetDeviceRequest> {
  /**
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  constructor(data?: PartialMessage<GetDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.GetDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeviceRequest {
    return new GetDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeviceRequest {
    return new GetDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeviceRequest {
    return new GetDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeviceRequest | PlainMessage<GetDeviceRequest> | undefined, b: GetDeviceRequest | PlainMessage<GetDeviceRequest> | undefined): boolean {
    return proto3.util.equals(GetDeviceRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceDetailResponse
 */
export class DeviceDetailResponse extends Message<DeviceDetailResponse> {
  /**
   * @generated from field: evergreen.console.v1.DeviceDetail device = 1;
   */
  device?: DeviceDetail;

  constructor(data?: PartialMessage<DeviceDetailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceDetailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device", kind: "message", T: DeviceDetail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDetailResponse {
    return new DeviceDetailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDetailResponse {
    return new DeviceDetailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDetailResponse {
    return new DeviceDetailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDetailResponse | PlainMessage<DeviceDetailResponse> | undefined, b: DeviceDetailResponse | PlainMessage<DeviceDetailResponse> | undefined): boolean {
    return proto3.util.equals(DeviceDetailResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceCommandRequest
 */
export class DeviceCommandRequest extends Message<DeviceCommandRequest> {
  /**
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  constructor(data?: PartialMessage<DeviceCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceCommandRequest {
    return new DeviceCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceCommandRequest {
    return new DeviceCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceCommandRequest {
    return new DeviceCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceCommandRequest | PlainMessage<DeviceCommandRequest> | undefined, b: DeviceCommandRequest | PlainMessage<DeviceCommandRequest> | undefined): boolean {
    return proto3.util.equals(DeviceCommandRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeviceCommandResponse
 */
export class DeviceCommandResponse extends Message<DeviceCommandResponse> {
  /**
   * @generated from field: bool accepted = 1;
   */
  accepted = false;

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  constructor(data?: PartialMessage<DeviceCommandResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeviceCommandResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceCommandResponse {
    return new DeviceCommandResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceCommandResponse {
    return new DeviceCommandResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceCommandResponse {
    return new DeviceCommandResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceCommandResponse | PlainMessage<DeviceCommandResponse> | undefined, b: DeviceCommandResponse | PlainMessage<DeviceCommandResponse> | undefined): boolean {
    return proto3.util.equals(DeviceCommandResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicyAppAssignment
 */
export class PolicyAppAssignment extends Message<PolicyAppAssignment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * @generated from field: repeated string group_ids = 3;
   */
  groupIds: string[] = [];

  constructor(data?: PartialMessage<PolicyAppAssignment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicyAppAssignment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyAppAssignment {
    return new PolicyAppAssignment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyAppAssignment {
    return new PolicyAppAssignment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyAppAssignment {
    return new PolicyAppAssignment().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyAppAssignment | PlainMessage<PolicyAppAssignment> | undefined, b: PolicyAppAssignment | PlainMessage<PolicyAppAssignment> | undefined): boolean {
    return proto3.util.equals(PolicyAppAssignment, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicyBrowserSettings
 */
export class PolicyBrowserSettings extends Message<PolicyBrowserSettings> {
  /**
   * @generated from field: string homepage_url = 1;
   */
  homepageUrl = "";

  /**
   * @generated from field: bool allow_popups = 2;
   */
  allowPopups = false;

  constructor(data?: PartialMessage<PolicyBrowserSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicyBrowserSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "homepage_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "allow_popups", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyBrowserSettings {
    return new PolicyBrowserSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyBrowserSettings {
    return new PolicyBrowserSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyBrowserSettings {
    return new PolicyBrowserSettings().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyBrowserSettings | PlainMessage<PolicyBrowserSettings> | undefined, b: PolicyBrowserSettings | PlainMessage<PolicyBrowserSettings> | undefined): boolean {
    return proto3.util.equals(PolicyBrowserSettings, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicyNetworkWifi
 */
export class PolicyNetworkWifi extends Message<PolicyNetworkWifi> {
  /**
   * @generated from field: string ssid = 1;
   */
  ssid = "";

  /**
   * @generated from field: string security = 2;
   */
  security = "";

  constructor(data?: PartialMessage<PolicyNetworkWifi>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicyNetworkWifi";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "security", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyNetworkWifi {
    return new PolicyNetworkWifi().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyNetworkWifi {
    return new PolicyNetworkWifi().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyNetworkWifi {
    return new PolicyNetworkWifi().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyNetworkWifi | PlainMessage<PolicyNetworkWifi> | undefined, b: PolicyNetworkWifi | PlainMessage<PolicyNetworkWifi> | undefined): boolean {
    return proto3.util.equals(PolicyNetworkWifi, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicyNetworkSettings
 */
export class PolicyNetworkSettings extends Message<PolicyNetworkSettings> {
  /**
   * @generated from field: repeated evergreen.console.v1.PolicyNetworkWifi wifi_networks = 1;
   */
  wifiNetworks: PolicyNetworkWifi[] = [];

  constructor(data?: PartialMessage<PolicyNetworkSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicyNetworkSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wifi_networks", kind: "message", T: PolicyNetworkWifi, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyNetworkSettings {
    return new PolicyNetworkSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyNetworkSettings {
    return new PolicyNetworkSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyNetworkSettings {
    return new PolicyNetworkSettings().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyNetworkSettings | PlainMessage<PolicyNetworkSettings> | undefined, b: PolicyNetworkSettings | PlainMessage<PolicyNetworkSettings> | undefined): boolean {
    return proto3.util.equals(PolicyNetworkSettings, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicySecuritySettings
 */
export class PolicySecuritySettings extends Message<PolicySecuritySettings> {
  /**
   * @generated from field: bool disk_encryption = 1;
   */
  diskEncryption = false;

  /**
   * @generated from field: int32 lock_after_minutes = 2;
   */
  lockAfterMinutes = 0;

  constructor(data?: PartialMessage<PolicySecuritySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicySecuritySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disk_encryption", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "lock_after_minutes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicySecuritySettings {
    return new PolicySecuritySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicySecuritySettings {
    return new PolicySecuritySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicySecuritySettings {
    return new PolicySecuritySettings().fromJsonString(jsonString, options);
  }

  static equals(a: PolicySecuritySettings | PlainMessage<PolicySecuritySettings> | undefined, b: PolicySecuritySettings | PlainMessage<PolicySecuritySettings> | undefined): boolean {
    return proto3.util.equals(PolicySecuritySettings, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicyBundle
 */
export class PolicyBundle extends Message<PolicyBundle> {
  /**
   * @generated from field: repeated evergreen.console.v1.PolicyAppAssignment apps = 1;
   */
  apps: PolicyAppAssignment[] = [];

  /**
   * @generated from field: string update_channel = 2;
   */
  updateChannel = "";

  /**
   * @generated from field: evergreen.console.v1.PolicyBrowserSettings browser = 3;
   */
  browser?: PolicyBrowserSettings;

  /**
   * @generated from field: evergreen.console.v1.PolicyNetworkSettings network = 4;
   */
  network?: PolicyNetworkSettings;

  /**
   * @generated from field: evergreen.console.v1.PolicySecuritySettings security = 5;
   */
  security?: PolicySecuritySettings;

  constructor(data?: PartialMessage<PolicyBundle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicyBundle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: PolicyAppAssignment, repeated: true },
    { no: 2, name: "update_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "browser", kind: "message", T: PolicyBrowserSettings },
    { no: 4, name: "network", kind: "message", T: PolicyNetworkSettings },
    { no: 5, name: "security", kind: "message", T: PolicySecuritySettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyBundle {
    return new PolicyBundle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyBundle {
    return new PolicyBundle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyBundle {
    return new PolicyBundle().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyBundle | PlainMessage<PolicyBundle> | undefined, b: PolicyBundle | PlainMessage<PolicyBundle> | undefined): boolean {
    return proto3.util.equals(PolicyBundle, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicySignature
 */
export class PolicySignature extends Message<PolicySignature> {
  /**
   * @generated from field: bool signed = 1;
   */
  signed = false;

  /**
   * @generated from field: string signer = 2;
   */
  signer = "";

  constructor(data?: PartialMessage<PolicySignature>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicySignature";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicySignature {
    return new PolicySignature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicySignature {
    return new PolicySignature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicySignature {
    return new PolicySignature().fromJsonString(jsonString, options);
  }

  static equals(a: PolicySignature | PlainMessage<PolicySignature> | undefined, b: PolicySignature | PlainMessage<PolicySignature> | undefined): boolean {
    return proto3.util.equals(PolicySignature, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.PolicyAuditEntry
 */
export class PolicyAuditEntry extends Message<PolicyAuditEntry> {
  /**
   * @generated from field: string timestamp = 1;
   */
  timestamp = "";

  /**
   * @generated from field: string actor = 2;
   */
  actor = "";

  /**
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * @generated from field: repeated string changes = 4;
   */
  changes: string[] = [];

  constructor(data?: PartialMessage<PolicyAuditEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.PolicyAuditEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "changes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyAuditEntry {
    return new PolicyAuditEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyAuditEntry {
    return new PolicyAuditEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyAuditEntry {
    return new PolicyAuditEntry().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyAuditEntry | PlainMessage<PolicyAuditEntry> | undefined, b: PolicyAuditEntry | PlainMessage<PolicyAuditEntry> | undefined): boolean {
    return proto3.util.equals(PolicyAuditEntry, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.Policy
 */
export class Policy extends Message<Policy> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string org_id = 2;
   */
  orgId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string version = 4;
   */
  version = "";

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  /**
   * @generated from field: evergreen.console.v1.PolicySignature signature = 7;
   */
  signature?: PolicySignature;

  /**
   * @generated from field: evergreen.console.v1.PolicyBundle bundle = 8;
   */
  bundle?: PolicyBundle;

  /**
   * @generated from field: repeated evergreen.console.v1.PolicyAuditEntry audit_log = 9;
   */
  auditLog: PolicyAuditEntry[] = [];

  constructor(data?: PartialMessage<Policy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.Policy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "signature", kind: "message", T: PolicySignature },
    { no: 8, name: "bundle", kind: "message", T: PolicyBundle },
    { no: 9, name: "audit_log", kind: "message", T: PolicyAuditEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Policy {
    return new Policy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Policy {
    return new Policy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Policy {
    return new Policy().fromJsonString(jsonString, options);
  }

  static equals(a: Policy | PlainMessage<Policy> | undefined, b: Policy | PlainMessage<Policy> | undefined): boolean {
    return proto3.util.equals(Policy, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListPoliciesRequest
 */
export class ListPoliciesRequest extends Message<ListPoliciesRequest> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  constructor(data?: PartialMessage<ListPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPoliciesRequest {
    return new ListPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPoliciesRequest {
    return new ListPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPoliciesRequest {
    return new ListPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPoliciesRequest | PlainMessage<ListPoliciesRequest> | undefined, b: ListPoliciesRequest | PlainMessage<ListPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(ListPoliciesRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListPoliciesResponse
 */
export class ListPoliciesResponse extends Message<ListPoliciesResponse> {
  /**
   * @generated from field: repeated evergreen.console.v1.Policy policies = 1;
   */
  policies: Policy[] = [];

  constructor(data?: PartialMessage<ListPoliciesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListPoliciesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policies", kind: "message", T: Policy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPoliciesResponse {
    return new ListPoliciesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPoliciesResponse {
    return new ListPoliciesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPoliciesResponse {
    return new ListPoliciesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPoliciesResponse | PlainMessage<ListPoliciesResponse> | undefined, b: ListPoliciesResponse | PlainMessage<ListPoliciesResponse> | undefined): boolean {
    return proto3.util.equals(ListPoliciesResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.GetPolicyRequest
 */
export class GetPolicyRequest extends Message<GetPolicyRequest> {
  /**
   * @generated from field: string policy_id = 1;
   */
  policyId = "";

  constructor(data?: PartialMessage<GetPolicyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.GetPolicyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPolicyRequest {
    return new GetPolicyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPolicyRequest {
    return new GetPolicyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPolicyRequest {
    return new GetPolicyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPolicyRequest | PlainMessage<GetPolicyRequest> | undefined, b: GetPolicyRequest | PlainMessage<GetPolicyRequest> | undefined): boolean {
    return proto3.util.equals(GetPolicyRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.UpsertPolicyRequest
 */
export class UpsertPolicyRequest extends Message<UpsertPolicyRequest> {
  /**
   * @generated from field: evergreen.console.v1.Policy policy = 1;
   */
  policy?: Policy;

  constructor(data?: PartialMessage<UpsertPolicyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.UpsertPolicyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy", kind: "message", T: Policy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertPolicyRequest {
    return new UpsertPolicyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertPolicyRequest {
    return new UpsertPolicyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertPolicyRequest {
    return new UpsertPolicyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertPolicyRequest | PlainMessage<UpsertPolicyRequest> | undefined, b: UpsertPolicyRequest | PlainMessage<UpsertPolicyRequest> | undefined): boolean {
    return proto3.util.equals(UpsertPolicyRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeletePolicyRequest
 */
export class DeletePolicyRequest extends Message<DeletePolicyRequest> {
  /**
   * @generated from field: string policy_id = 1;
   */
  policyId = "";

  constructor(data?: PartialMessage<DeletePolicyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeletePolicyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePolicyRequest {
    return new DeletePolicyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePolicyRequest {
    return new DeletePolicyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePolicyRequest {
    return new DeletePolicyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePolicyRequest | PlainMessage<DeletePolicyRequest> | undefined, b: DeletePolicyRequest | PlainMessage<DeletePolicyRequest> | undefined): boolean {
    return proto3.util.equals(DeletePolicyRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.EventRecord
 */
export class EventRecord extends Message<EventRecord> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string device_id = 2;
   */
  deviceId = "";

  /**
   * @generated from field: string org_id = 3;
   */
  orgId = "";

  /**
   * @generated from field: string occurred_at = 4;
   */
  occurredAt = "";

  /**
   * @generated from field: string actor = 5;
   */
  actor = "";

  /**
   * @generated from field: string action = 6;
   */
  action = "";

  /**
   * @generated from field: string severity = 7;
   */
  severity = "";

  /**
   * @generated from field: string message = 8;
   */
  message = "";

  constructor(data?: PartialMessage<EventRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.EventRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "occurred_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "actor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "severity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRecord {
    return new EventRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRecord {
    return new EventRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRecord {
    return new EventRecord().fromJsonString(jsonString, options);
  }

  static equals(a: EventRecord | PlainMessage<EventRecord> | undefined, b: EventRecord | PlainMessage<EventRecord> | undefined): boolean {
    return proto3.util.equals(EventRecord, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListEventsRequest
 */
export class ListEventsRequest extends Message<ListEventsRequest> {
  /**
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  /**
   * @generated from field: string org_id = 2;
   */
  orgId = "";

  /**
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * @generated from field: string severity = 4;
   */
  severity = "";

  /**
   * @generated from field: string search = 5;
   */
  search = "";

  /**
   * @generated from field: string start_time = 6;
   */
  startTime = "";

  /**
   * @generated from field: string end_time = 7;
   */
  endTime = "";

  constructor(data?: PartialMessage<ListEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "severity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "start_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "end_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined, b: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListEventsRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListEventsResponse
 */
export class ListEventsResponse extends Message<ListEventsResponse> {
  /**
   * @generated from field: repeated evergreen.console.v1.EventRecord events = 1;
   */
  events: EventRecord[] = [];

  constructor(data?: PartialMessage<ListEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: EventRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined, b: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined): boolean {
    return proto3.util.equals(ListEventsResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.UserRecord
 */
export class UserRecord extends Message<UserRecord> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  /**
   * @generated from field: string status = 4;
   */
  status = "";

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  constructor(data?: PartialMessage<UserRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.UserRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRecord {
    return new UserRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRecord {
    return new UserRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRecord {
    return new UserRecord().fromJsonString(jsonString, options);
  }

  static equals(a: UserRecord | PlainMessage<UserRecord> | undefined, b: UserRecord | PlainMessage<UserRecord> | undefined): boolean {
    return proto3.util.equals(UserRecord, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListUsersRequest
 */
export class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  constructor(data?: PartialMessage<ListUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined, b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListUsersResponse
 */
export class ListUsersResponse extends Message<ListUsersResponse> {
  /**
   * @generated from field: repeated evergreen.console.v1.UserRecord users = 1;
   */
  users: UserRecord[] = [];

  constructor(data?: PartialMessage<ListUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: UserRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined, b: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListUsersResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.InviteUserResponse
 */
export class InviteUserResponse extends Message<InviteUserResponse> {
  /**
   * @generated from field: evergreen.console.v1.UserRecord user = 1;
   */
  user?: UserRecord;

  constructor(data?: PartialMessage<InviteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.InviteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserRecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined, b: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.UpdateUserRoleRequest
 */
export class UpdateUserRoleRequest extends Message<UpdateUserRoleRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<UpdateUserRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.UpdateUserRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRoleRequest {
    return new UpdateUserRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRoleRequest {
    return new UpdateUserRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRoleRequest {
    return new UpdateUserRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRoleRequest | PlainMessage<UpdateUserRoleRequest> | undefined, b: UpdateUserRoleRequest | PlainMessage<UpdateUserRoleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRoleRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.DeactivateUserRequest
 */
export class DeactivateUserRequest extends Message<DeactivateUserRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<DeactivateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.DeactivateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateUserRequest {
    return new DeactivateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateUserRequest {
    return new DeactivateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateUserRequest {
    return new DeactivateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateUserRequest | PlainMessage<DeactivateUserRequest> | undefined, b: DeactivateUserRequest | PlainMessage<DeactivateUserRequest> | undefined): boolean {
    return proto3.util.equals(DeactivateUserRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.TenantRecord
 */
export class TenantRecord extends Message<TenantRecord> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string parent_id = 3;
   */
  parentId = "";

  /**
   * @generated from field: bool reseller = 4;
   */
  reseller = false;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  constructor(data?: PartialMessage<TenantRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.TenantRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reseller", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantRecord {
    return new TenantRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantRecord {
    return new TenantRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantRecord {
    return new TenantRecord().fromJsonString(jsonString, options);
  }

  static equals(a: TenantRecord | PlainMessage<TenantRecord> | undefined, b: TenantRecord | PlainMessage<TenantRecord> | undefined): boolean {
    return proto3.util.equals(TenantRecord, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListTenantsRequest
 */
export class ListTenantsRequest extends Message<ListTenantsRequest> {
  /**
   * @generated from field: string reseller_id = 1;
   */
  resellerId = "";

  constructor(data?: PartialMessage<ListTenantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListTenantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reseller_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTenantsRequest {
    return new ListTenantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTenantsRequest {
    return new ListTenantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTenantsRequest {
    return new ListTenantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTenantsRequest | PlainMessage<ListTenantsRequest> | undefined, b: ListTenantsRequest | PlainMessage<ListTenantsRequest> | undefined): boolean {
    return proto3.util.equals(ListTenantsRequest, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.ListTenantsResponse
 */
export class ListTenantsResponse extends Message<ListTenantsResponse> {
  /**
   * @generated from field: repeated evergreen.console.v1.TenantRecord tenants = 1;
   */
  tenants: TenantRecord[] = [];

  constructor(data?: PartialMessage<ListTenantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.ListTenantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenants", kind: "message", T: TenantRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTenantsResponse {
    return new ListTenantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTenantsResponse {
    return new ListTenantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTenantsResponse {
    return new ListTenantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTenantsResponse | PlainMessage<ListTenantsResponse> | undefined, b: ListTenantsResponse | PlainMessage<ListTenantsResponse> | undefined): boolean {
    return proto3.util.equals(ListTenantsResponse, a, b);
  }
}

/**
 * @generated from message evergreen.console.v1.UpsertTenantRequest
 */
export class UpsertTenantRequest extends Message<UpsertTenantRequest> {
  /**
   * @generated from field: evergreen.console.v1.TenantRecord tenant = 1;
   */
  tenant?: TenantRecord;

  constructor(data?: PartialMessage<UpsertTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evergreen.console.v1.UpsertTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: TenantRecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertTenantRequest {
    return new UpsertTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertTenantRequest {
    return new UpsertTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertTenantRequest {
    return new UpsertTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertTenantRequest | PlainMessage<UpsertTenantRequest> | undefined, b: UpsertTenantRequest | PlainMessage<UpsertTenantRequest> | undefined): boolean {
    return proto3.util.equals(UpsertTenantRequest, a, b);
  }
}

